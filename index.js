require('dotenv').config()
const {Bot, GrammyError, HttpError, Keyboard, InlineKeyboard } = require('grammy');
const { hydrate } = require('@grammyjs/hydrate');

const bot = new Bot(process.env.BOT_API_MODEL);
bot.use(hydrate());

/*
bot.on([':media', '::url', ':voice'], async (ctx) => {
   await ctx.reply('–ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å...')
});

bot.on(':photo').on('::hashtag', () => {

})


//–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–∞–º–æ–º—É

bot.on('msg').filter((ctx) => {
    return ctx.from.id ===  
}, async (ctx) => {
    await ctx.reply('–ø—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω')
})
*/
//msg –∑–∞–º–µ–Ω—è–µ—Ç message, edit –∑–∞–º–µ–Ω—è–µ—Ç editmessage,:media –∑–∞–º–µ–Ω—è–µ—Ç —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ


bot.api.setMyCommands([
    {
        command: 'start', 
        description: '–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞',
    }, 
    {
        command: 'mood',
        description: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
    },
    // {
    //     command: 'share',
    //     description: '–£–±–æ–≥–∏–π ',
    // },
    // {
    //     command: 'inline_keyboard',
    //     description: '123',
    // },
    {
        command: 'menu',
        description: '–ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é',
    },
]);

 
// bot.command(['sayhello','hello','say_hi'], async (ctx) => {
//     await ctx.reply('hello!');
// })

// bot.on('msg', async (ctx) => {
//     console.log(ctx.msg); // from id username, me –∏–Ω—Ñ–∞ –æ —Å–∞–º–æ–º –±–æ—Ç–µ
// })
bot.command('start', async (ctx) => {
    await ctx.react('üåö')
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç', {
        reply_parameters: {message_id: ctx.msg.message_id}
    });
})

const menuKeyboard = new InlineKeyboard().text('—É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑', 'order-status').text('–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'support');
const backKeyboard = new InlineKeyboard().text('< –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back')
bot.command('menu', async (ctx) => {
    await ctx.reply('–≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
        reply_markup: menuKeyboard,
    });
});

bot.callbackQuery('order-status', async (ctx) => {
    await ctx.callbackQuery.message.editText('status zakaza: v pitu', {
        reply_markup: backKeyboard,
    });
    await ctx.answerCallbackQuerry();
});

bot.callbackQuery('support', async (ctx) => {
    await ctx.callbackQuery.message.editText('–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', {
        reply_markup: backKeyboard,
    });
    await ctx.answerCallbackQuerry();
});

bot.callbackQuery('back', async (ctx) => {
    await ctx.callbackQuery.message.editText('–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {
        reply_markup: menuKeyboard,
    });
    await ctx.answerCallbackQuerry();
});

// bot.command('mood', async (ctx) => {
//     // const moodKeyboard = new Keyboard().text('okey').row().text('ok').row().text('pain').resized()
//     const moodLabels = ['okey', 'es', 'good']
//     const rows = moodLabels.map((label) => {
//         return [
//             Keyboard.text(label)
//         ]
//     })
//     const moodKeyboard2 = Keyboard.from(rows).resized()
//     await ctx.reply('–∫–∞–∫ –¥–µ–ª–∞', {
//         reply_markup: moodKeyboard2
//     })
// })

// —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑—á–µ–∑–∞–ª–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å .oneTime()

// bot.command('share', async (ctx) => {
//     const shareKeyboard = new Keyboard().requestLocation('–≥–µ–æ').requestContact('–∫–æ–Ω—Ç–∞–∫—Ç').
//     requestPoll('–æ–ø—Ä–æ—Å').placeholder('—É–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ').resized()
//     await ctx.reply('—á–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è', {
//         reply_markup: shareKeyboard
//     })
// })

// bot.command('inline_keyboard', async (ctx) => {
//     // const inlineKeyboard = new InlineKeyboard().text('1', 'button-1').row().text('2', 'button-2').row().text('3', 'button-3')
//     const inlineKeyboard2 = new InlineKeyboard().url('–ø–µ—Ä–µ–π–∏–∏ –≤ —Ç–≥ –∫–∞–Ω–∞–ª', 'https://www.instagram.com/accounts/onetap/?next=%2F')
//     await ctx.reply('–≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É', {
//         reply_markup: inlineKeyboard2,
//     })
// })

//  bot.callbackQuery(/button-[1-3]/, async (ctx) => {
//     await ctx.answerCallbackQuery('–≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É!');
//     await ctx.reply(`–≤—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É: ${ctx.callbackQuery.data}`);
// })
// bot.on('callback_query:data', async (ctx) => {
//     await ctx.answerCallbackQuery();
//     await ctx.reply('–≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É');
// });

// bot.on(':contact', async (ctx) => {
//     await ctx.reply('—Å–ø–∞—Å–∏–±–æ')
// })

// bot.hears('okey', async (ctx) => {
//     await ctx.reply('–∑–∞–µ–±–∏—Å—å', {
//         reply_markup: {remove_keyboard: true}
//     })
// })

/*
bot.command('start', async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç tg canal: <a>—Å—ã–ª–ª–∫–∞</a>', {
        parse_mode: 'HTML'
    });
})
*/


// bot.hears('id', async (ctx) => {
//     await ctx.reply(ctx.from.id);
// })
// bot.hears(['ping', 'page'], async (ctx) => {
//     await ctx.reply('pong')
// })


// (/–ø–∏–ø–µ—Ü/) –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–∏–≤–∞ —Ç–æ –±–æ—Ç –æ—Ç—Ä–µ–≥–∞–≥–∏—Ä—É–µ—Ç –∫–∞–∫ –º–∞—Ç—ã –µ—Å–ª–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ

bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error("error in request:", e.description);
    } else if (e instanceof HttpError) {
        console.error("Could not contact Telegram:", e);
    } else {
        console.error("Unknowb:", e);
    }
}); 

bot.start();
